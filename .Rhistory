plotly_plot
}
# age_summray <- age_spending_summray(data)
# age_spending_visualization(age_summray)
city_spending_summray <- function(data) {
return(
# Summarize total spending by city and arrange by total spending in descending order
data %>%
group_by(city) %>%  # Group by city
summarize(total_spending = sum(total, na.rm = TRUE)) %>%  # Calculate total spending for each city
arrange(desc(total_spending))  # Arrange the data by total spending in descending order
)
}
city_spending_visualization <- function(city_summray) {
# Create a bar plot to visualize total spending by city
plot <- ggplot(city_summray, aes(x = reorder(city, -total_spending), y = total_spending, fill = city)) +
geom_bar(stat = "identity") +
labs(title = "Total Spending by City",
x = "City",
y = "Total Spending") +
theme_minimal() +
scale_y_continuous(
breaks = seq(0, max(city_summray$total_spending), by = 500000),
# Define the y-axis breaks from 0 to the maximum total spending in increments of 100,000.
labels = label_comma()
# Format the y-axis labels to include commas (e.g., 1,000,000 instead of 1000000).
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Convert ggplot to an interactive Plotly plot
return(ggplotly(plot))
}
# city_summray <- city_spending_summray(data)
# city_spending_visualization(city_summray)
pay_type_summray <- function(data) {
return(
# Summarize total spending by payment type (Cash vs Credit)
data %>%
group_by(paymentType) %>%
summarize(total_spending = sum(total, na.rm = TRUE))
)
}
pay_type_visualization <- function(payment_summray) {
return(
# Create a pie chart
# ggplotly(
plot_ly(
data = payment_summary,
labels = ~paymentType,   # Set the labels for the slices
values = ~total_spending, # Set the values for the slices
type = 'pie',           # Specify pie chart
textinfo = 'label+percent', # Show labels and percentages
textposition = 'inside', # Position text inside the slices
hoverinfo = 'label+value', # Hover to display labels and total spending
marker = list(colors = c("steelblue", "#5BBC9B")) # Customize slice colors
) %>%
layout(
title = "Total Spending by Payment Type", # Chart title
showlegend = TRUE # Show the legend
)
# )
)
}
payment_summary <- pay_type_summray(data)
pay_type_visualization(payment_summary)
spending_distribution_visualization <- function(data) {
# Create a histogram to visualize the distribution of total spending
plot <- ggplot(data, aes(x = total)) +
geom_histogram(binwidth = 100, fill = "steelblue", color = "black") +
labs(
title = "Distribution of Total Spending",
x = "Total Spending",
y = "Count"
) +
scale_x_continuous(
breaks = seq(0, max(data$total), by = 200),
) +
scale_y_continuous(
breaks = seq(0, max(500), by = 50),
)
return(ggplotly(plot))
}
# spending_distribution_visualization(data)
# Need to use "rstudio projects" to fix importing problems e.g. source("installing.R")
# For more info: https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects
source("C:/Users/Asus/Desktop/programming/dsProject/R/visualization.R")
library(shiny)
library(bslib)
# make sure all files paths start from your working dir
# To change your working directory location, click on
# Session > Set Working Directory > Choose Directory…
# in the RStudio menu bar.
getwd()
home_page <- card(
fileInput("data_input","Import Data To Start Analysis: ", accept = ".csv", width = "100%"),
card(
card_header("Sample of Data imported: "),
tableOutput("imported_data_sample")
)
)
dashboard_page <- card(
fluidRow(
column(0.5*12,card(
plotlyOutput('age_spending_plot')
)),
column(0.5*12,card(
plotlyOutput('city_spending_plot')
))
),
fluidRow(
column(0.5*12,card(
plotOutput('pay_type_plot')
)),
column(0.5*12,card(
plotlyOutput('spending_distribution_plot')
))
)
)
clustring_page <- "clustring_page"
association_page <- "association_page"
# shiny's UI
ui <- page_fillable(
navset_card_tab(
# Page
nav_panel("Homepage", home_page),
# Page
nav_panel("Dashboard", dashboard_page),
# Page
nav_panel("Clustring", clustring_page),
# Page
nav_panel("Association", association_page),
# Page
nav_menu(
"More",
#page
nav_panel("Settings", "Panel D content"),
# #page
# nav_panel("Browse Data", upload_file_page),
"----",
"Links:",
nav_item(
a("GitHub", href = "https://shiny.posit.co", target = "_blank")
),
nav_item(
a("Website", href = "https://shiny.posit.co", target = "_blank")
),
),
),
)
# shiny gui server
server <- function(input, output) {
print("Server called.")
data <- reactive({
print("read csv called")
req(input$data_input)
print("read csv called2")
read.csv(
input$data_input$datapath,
header = TRUE,
stringsAsFactors = FALSE
)
})
output$imported_data_sample <- renderTable({
head(data())
})
output$age_spending_plot <- renderPlotly({
age_spending_visualization(
age_spending_summray(data())
)
})
output$city_spending_plot <- renderPlotly({
city_spending_visualization(
city_spending_summray(data())
)
})
output$pay_type_plot <- renderPlot({
pay_type_visualization(
pay_type_summray(data())
)
})
output$spending_distribution_plot <- renderPlotly({
spending_distribution_visualization(
data()
)
})
}
# start app gui
shinyApp(ui = ui, server = server)
runApp(shinyApp(ui = ui, server = server), display.mode = "showcase")
# Need to use "rstudio projects" to fix importing problems e.g. source("installing.R")
# For more info: https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects
source("C:/Users/Asus/Desktop/programming/dsProject/R/visualization.R")
library(shiny)
library(bslib)
# make sure all files paths start from your working dir
# To change your working directory location, click on
# Session > Set Working Directory > Choose Directory…
# in the RStudio menu bar.
getwd()
home_page <- card(
fileInput("data_input","Import Data To Start Analysis: ", accept = ".csv", width = "100%"),
card(
card_header("Sample of Data imported: "),
tableOutput("imported_data_sample")
)
)
dashboard_page <- card(
fluidRow(
column(0.5*12,card(
plotlyOutput('age_spending_plot')
)),
column(0.5*12,card(
plotlyOutput('city_spending_plot')
))
),
fluidRow(
column(0.5*12,card(
plotOutput('pay_type_plot')
)),
column(0.5*12,card(
plotlyOutput('spending_distribution_plot')
))
)
)
clustring_page <- "clustring_page"
association_page <- "association_page"
# shiny's UI
ui <- page_fillable(
navset_card_tab(
# Page
nav_panel("Homepage", home_page),
# Page
nav_panel("Dashboard", dashboard_page),
# Page
nav_panel("Clustring", clustring_page),
# Page
nav_panel("Association", association_page),
# Page
nav_menu(
"More",
#page
nav_panel("Settings", "Panel D content"),
# #page
# nav_panel("Browse Data", upload_file_page),
"----",
"Links:",
nav_item(
a("GitHub", href = "https://shiny.posit.co", target = "_blank")
),
nav_item(
a("Website", href = "https://shiny.posit.co", target = "_blank")
),
),
),
)
# shiny gui server
server <- function(input, output) {
print("Server called.")
data <- reactive({
print("read csv called")
req(input$data_input)
print("read csv called2")
read.csv(
input$data_input$datapath,
header = TRUE,
stringsAsFactors = FALSE
)
})
output$imported_data_sample <- renderTable({
head(data())
})
output$age_spending_plot <- renderPlotly({
age_spending_visualization(
age_spending_summray(data())
)
})
output$city_spending_plot <- renderPlotly({
city_spending_visualization(
city_spending_summray(data())
)
})
output$pay_type_plot <- renderPlot({
pay_type_visualization(
pay_type_summray(data())
)
})
output$spending_distribution_plot <- renderPlotly({
spending_distribution_visualization(
data()
)
})
}
# start app gui
shinyApp(ui = ui, server = server)
runApp(shinyApp(ui = ui, server = server), display.mode = "showcase")
data <- read.csv("grc.csv")
head(data)
# Need to use "rstudio projects" to fix importing problems e.g. source("installing.R")
# For more info: https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects
source("installing.R")
# Need to use "rstudio projects" to fix importing problems e.g. source("installing.R")
# For more info: https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects
source("C:/Users/Asus/Desktop/programming/dsProject/R/installing.R")
source("C:/Users/Asus/Desktop/programming/dsProject/R/installing.R/data_cleaning.R")
# Need to use "rstudio projects" to fix importing problems e.g. source("installing.R")
# For more info: https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects
source("C:/Users/Asus/Desktop/programming/dsProject/R/installing.R")
source("C:/Users/Asus/Desktop/programming/dsProject/R/data_cleaning.R")
source("C:/Users/Asus/Desktop/programming/dsProject/R/visualization.R")
source("C:/Users/Asus/Desktop/programming/dsProject/R/clustering.R")
source("C:/Users/Asus/Desktop/programming/dsProject/R/association.R")
library(shiny)
library(bslib)
library(visNetwork) # for association plot view
# make sure all files paths start from your working dir
# To change your working directory location, click on
# Session > Set Working Directory > Choose Directory…
# in the RStudio menu bar.
# getwd()
home_page <- card(
fileInput("data_input","Import Data To Start Analysis: ", accept = ".csv", width = "100%"),
uiOutput(
"imported_data_sample"
)
)
# shiny's UI
ui <- page_fillable(
navset_card_tab(
# Page
nav_panel("Homepage", home_page),
# Page
nav_panel("Dashboard", uiOutput("dashboard_page")),
# Page
nav_panel("clustering", uiOutput("clustering_page")),
# Page
nav_panel("Association", uiOutput("association_page")),
# More
nav_menu(
"More",
#page
nav_panel("Association Graph", uiOutput("association_graph_page")),
# "----",
# "Links:",
# nav_item(
#   a("GitHub", href = "https://shiny.posit.co", target = "_blank")
# ),
# nav_item(
#   a("Project repo", href = "https://shiny.posit.co", target = "_blank")
# ),
),
),
)
# shiny gui server
server <- function(input, output) {
data <- reactive({
req(input$data_input)
data_cleaning(
read.csv(
input$data_input$datapath,
header = TRUE,
stringsAsFactors = FALSE
)
)
})
data_exist <- reactive({
if (is.null(input$data_input)) {
return(FALSE)
} else {
return(TRUE)
}
})
output$imported_data_sample <- renderUI({
if (data_exist()) {
card(
card_header("Sample of Data imported: "),
renderTable({
head(data())
})
)
} else {
"No data imported yet."
}
})
output$dashboard_page <- renderUI({
if (data_exist()) {
card(
fluidRow(
column(0.5*12,card(
plotlyOutput('age_spending_plot')
)),
column(0.5*12,card(
plotlyOutput('city_spending_plot')
))
),
fluidRow(
column(0.5*12,card(
plotOutput('pay_type_plot')
)),
column(0.5*12,card(
plotlyOutput('spending_distribution_plot')
))
)
)
} else {
"No data imported yet."
}
})
output$age_spending_plot <- renderPlotly({
age_spending_visualization(
age_spending_summray(data())
)
})
output$city_spending_plot <- renderPlotly({
city_spending_visualization(
city_spending_summray(data())
)
})
output$pay_type_plot <- renderPlot({
pay_type_visualization(
pay_type_summray(data())
)
})
output$spending_distribution_plot <- renderPlotly({
spending_distribution_visualization(
data()
)
})
output$clustering_page <- renderUI({
if (data_exist()) {
card(
card_header(
numericInput("k_number",label="Input Number of clusters k [from 2 to 4]: ",value=3, min=2, max=4,step=1)
),
plotlyOutput('clustering_plot')
)
} else {
"No data imported yet."
}
})
output$clustering_plot <- renderPlotly({
clustering(
data(),
input$k_number
)
})
association_rules_reactive <- reactive({
if (length(input$min_confidence) == 0) {
return(list()) # to tell them that there no data yet
}
return(
association_rules(data(),input$min_confidence, input$min_support)
)
})
output$association_page <- renderUI({
if (data_exist()) {
card(
card_header(
fluidRow(
column(0.5*12,card(
numericInput("min_confidence",label="Input min confidence [from 0.001 to 1]: ",value=0.5, min=0.001, max=1,step=0.001)
)),
column(0.5*12,card(
numericInput("min_support",label="Input min support [from 0.001 to 1]: ",value=0.01, min=0.001, max=1,step=0.001)
))
)
),
uiOutput("association_rules_table")
)
} else {
"No data imported yet."
}
})
output$association_rules_table <- renderUI({
rules <- association_rules_reactive()
if (association_rules_exist(rules)) {
renderTable({
association_Data_frame(rules)
})
} else {
"No association rules found according to current min confidence and support."
}
})
output$association_graph_page <- renderUI({
if (data_exist()) {
rules <- association_rules_reactive()
if (length(rules) == 0) {
card(
card_header("Association rules in graph view:"),
"Choose min min confidence and support from association page frist."
)
} else {
if (association_rules_exist(rules)) {
card(
card_header("Association rules in graph view:"),
renderVisNetwork({
association_graph(rules)
})
)
} else {
"No association rules found according to current min confidence and support."
}
}
} else {
"No data imported yet."
}
})
}
# start app
runApp(shinyApp(ui = ui, server = server))
#runApp(shinyApp(ui = ui, server = server), display.mode = "showcase")
runApp(shinyApp(ui = ui, server = server))
# Run the Shiny application
runApp(shinyApp(ui = ui, server = server))
